/**************************************************************************/
/*
   Autogenerated by the Variant Generator.

   Call was:

     '../build/mkvariant' 'variant.inf'
                                                                          */
/**************************************************************************/
#include "variant.hh"


Variant::Variant()
{
}

Variant::Variant(Variant &&o)
{
  switch(o.tag_) {
    case 1:
      new (&std_string_) std::string(std::move(o.std_string_));
      tag_ = 1;
      break;
    case 2:
      uint32_t_ = o.uint32_t_;
      tag_ = 2;
      break;
    case 3:
      int32_t_ = o.int32_t_;
      tag_ = 3;
      break;
  }

}

Variant::~Variant()
{
  destruct();
}

void Variant::destruct()
{
  switch(tag_) {
    case 1: std_string_.~basic_string(); break;
  }
  tag_ = 0;
}

Variant &Variant::operator=(Variant &&o)
{
  switch(o.tag_) {
    case 1:
      if (tag_ == o.tag_) {
        std_string_ = std::move(o.std_string_);
      } else {
        destruct();
        new (&std_string_) std::string(std::move(o.std_string_));
        tag_ = 1;
      }
      break;
    case 2:
      if (tag_ == o.tag_) {
        uint32_t_ = o.uint32_t_;
      } else {
        destruct();
        uint32_t_ = o.uint32_t_;
        tag_ = 2;
      }
      break;
    case 3:
      if (tag_ == o.tag_) {
        int32_t_ = o.int32_t_;
      } else {
        destruct();
        int32_t_ = o.int32_t_;
        tag_ = 3;
      }
      break;
  }
  return *this;
}

Variant::Variant(std::string &&o)
  : std_string_(std::move(o))
{
  tag_ = 1;
}

Variant::Variant(uint32_t o)
  : uint32_t_(o)
{
  tag_ = 2;
}

Variant::Variant(int32_t o)
  : int32_t_(o)
{
  tag_ = 3;
}

Variant &Variant::operator=(std::string &&o)
{
  if (tag_ == 1) {
    std_string_ = std::move(o);
  } else {
    destruct();
    new (&std_string_) std::string(std::move(o));
    tag_ = 1;
  }
  return *this;
}

Variant &Variant::operator=(uint32_t o)
{
  if (tag_ == 2) {
    uint32_t_ = o;
  } else {
    destruct();
    uint32_t_ = o;
    tag_ = 2;
  }
  return *this;
}

Variant &Variant::operator=(int32_t o)
{
  if (tag_ == 3) {
    int32_t_ = o;
  } else {
    destruct();
    int32_t_ = o;
    tag_ = 3;
  }
  return *this;
}

